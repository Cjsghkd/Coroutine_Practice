1-0 | 처음 만나는 코루틴

### 동시성
- 동시성이 없으면 사용자가 불편
- 동시성이 없다면, 하드웨어 리소스도 낭비
- 합의해서 나누어 씁시다
    - 비선점형 멀티태스킹
        - 자원을 서로 나누어 쓰자
        - 현실에서는 거의 성공 못함
        - 누군가 자원을 독점하고 죽어버리는 경우가 많음
        - 윈도 95,98, ME, OS/2, 클래식 맥 OS의 문제
- 중재자를 둡시다
    - 선점형 멀티태스킹 (Ring 0을 가진 중재자 = 운영체제)
        - Ring 0의 권한을 가진 운영체제가 나누어 주기로
        - 응용 프로그램은 Ring 3
        - Ring 1~2는 제대로 활용 안됨
        - 가상화 기술을 위해 Ring -1도 나중에 추가됨
        - Ring 레벨이 높은 곳에서 낮은 곳으로만 접근 가능
            - Ring 0 → Ring 3 접근 가능. Ring 3 → Ring 0 직접 접근이 불가능.시스템 콜등의 방법으로 간접 접근.
        - 운영체제 커널이나 하드웨어 드라이버는 보통 Ring 0의 특권을 가짐
            - 시스템 종료(HLT), 인터럽트 활성화(STI) / 비활성화(CLI), 하드웨어 입출력 (IN/OUT)
        - 일반적으로 시분할 등의 방법으로 자원을 나누었음
            - CPU가 하나인 장비에서도 시분할의 방법으로 자원을 나누어 사용. (Round Robin 등)
    - 선점형 멀티태스킹을 위한 도구
        - 프로세스
            - 운영체제는 1개 이상의 프로세스를 시분할에 의해 번갈아서 동작을 시킴
            - 코드, 데이터, 힙, 스택등의 자료구조를 가짐
        - 스레드
            - 프로세스는 1개 이상의 스레드를 가지며 시분할에 의해 번갈아서 동작.
            - 일반적으로 스택을 구분하고 나머지는 공유하지만 운영체제 마다 다름.
            - 리눅스에서는 프로세스와 스레드와의 차이가 크지 않음 (COW, Copy on Write 방식)
            - 윈도에서는 프로세스의 생성이 느리기 때문에 스레드의 중요성이 커짐.

### 병렬성
- SMP(Symmetric Multiprocessor)와 가시성
    - 여러 프로세스가 하나의 메모리를 쓰는 모델
    - 여러 프로세스가 물리적으로 여러 일을 동시에 사용하는 일이 가능해짐.
    - 하지만 프로그래밍 이슈가 범람
    - 여러 CPU가 개별 캐쉬를 사용하게 되면서 발생한 문제
        - CPU 1에서 A[0]을 1 증가, CPU 2에서 A[1]을 1 증가.
        - CPU 1의 캐쉬에 있는 A[0]만 1증가, CPU 2의 캐쉬에 있는 A[1]만 1증가
        - 심지어 CPU 3에서 데이터 A[0]이나 A[1]을 접근해도 데이터는 0일 수 있습니다. (가시성 문제)
        - 락이나 메모리 베리어가 필요할 수 있음.
- 데이터를 갱신해도 문제
    - 캐시는 캐시라인의 집합
        - 캐시라인은 64, 128 바이트등 연속된 사이즈로 묶여있다.
        - 캐시라인을 통 채로 한번에 교체한다. 데이터 하나만 교체할 수 없음.
- 가짜 공유를 걱정
    - 인접한 캐시라인은 한번에 한 코어에서만 접근 가능
        - 한 캐시라인을 하나의 코어가 갱신하는 동안 다른 코어의 캐시는 무효화되고 접근할 수 없음.
        - 코어 1이 A[0]을 접근하고 코어 2가 A[1]을 접근한다면 코어 2는 코어 1이 A[0]을 갱신하는 동안 기다려야.
        - 두개의 코어를 쓰는 의미가 없어집니다. (가짜 공유)

### 콜백, RxJava가 이 문제들을 해결하기 위해 노력했습니다.
- 하지만 아직도 콜백과 Rx가 최선인지는 의문이 남습니다.
